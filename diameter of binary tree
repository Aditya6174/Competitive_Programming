class Solution {
  public:
    int height(Node* root){
        if(root == NULL)
        return 0;
        int lh = height(root->left);
        int rh = height(root->right);
        return max(lh,rh) + 1;
    }
    pair<int,int> df(Node* root){
        if(root == NULL){
            pair<int,int> pr = make_pair(0,0);
            return pr;
        }
        pair<int,int> left = df(root->left);
        pair<int,int> right = df(root->right);
        int op1 = left.first;
        int op2 = right.first;
        int op3 = (left.second+right.second) + 1;
        pair<int,int> ans;
        ans.first = max(op1,max(op2,op3));
        ans.second = max(left.second,right.second) + 1;
        return ans;
    }
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
        // Your code here
        if(root == NULL)
        return 0;
        int op1 = diameter(root->left);
        int op2 = diameter(root->right);
        int op3 = height(root->left) + height(root->right) + 1;
        int ans = max(op1,max(op2,op3));
        return ans;
    }
};
